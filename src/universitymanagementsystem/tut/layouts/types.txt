* Border Layout
* Flow Layout
* Grid Layout
* Card Layout
* Grid Bag Layout
* Box Layout
* Group Layout
* Scroll Panel Layout
* Spring Layout

 -> Border Layout
public static final int NORTH
public static final int SOUTH
public static final int EAST
public static final int WEST
public static final int CENTER

syntax for specifying the region

```f.add(b1, BorderLayout.NORTH);

if region is not specified then the object will cover the entire Jframe overwriting all previous objects.


in case we want gap in between the borders then use this constructor
```jframe.setLayout(new BorderLayout(20, 15));  

-> Flow Layout
The Java FlowLayout class is used to arrange the components in a line, one after another (in a flow).

public static final int LEFT
public static final int RIGHT
public static final int CENTER
public static final int LEADING
public static final int TRAILING

Constructors of FlowLayout class
    ```FlowLayout(): creates a flow layout with centered alignment and a default 5 unit horizontal and vertical gap.
    ```FlowLayout(int align): creates a flow layout with the given alignment and a default 5 unit horizontal and vertical gap.
    ```FlowLayout(int align, int hgap, int vgap): creates a flow layout with the given alignment and the given horizontal and vertical gap.

```frameObj.setLayout(new FlowLayout());   //alignment is center by default
```f.setLayout(new FlowLayout(FlowLayout.RIGHT));    
``` frameObj.setLayout(new FlowLayout(FlowLayout.LEFT, 20, 25));  

flow layout will keep the alignment flexible while  grid layout will scale the buttons to fit in the grids declared.



-> Grid Layout
Arrange the components in a rectangular Grid
Constructors of GridLayout class
    ```GridLayout(): creates a grid layout with one column per component in a row.
    ```GridLayout(int rows, int columns): creates a grid layout with the given rows and columns but no gaps between the components.
    ```GridLayout(int rows, int columns, int hgap, int vgap): creates a grid layout with the given rows and columns along with given horizontal and vertical gaps.

GridLayout()
```frameObj.setLayout(new GridLayout());    
GridLayout(int rows, int columns)
```f.setLayout(new GridLayout(3,3));    
GridLayout(int rows, int columns, int hgap, int vgap)
```frameObj.setLayout(new GridLayout(3, 3, 20, 25)); 


-> Card Layout
The Java CardLayout class manages the components in such a manner that only one component is visible at a time.

Constructors of CardLayout Class
    CardLayout(): creates a card layout with zero horizontal and vertical gap.
    CardLayout(int hgap, int vgap): creates a card layout with the given horizontal and vertical gap.

Commonly Used Methods of CardLayout Class
    public void next(Container parent): is used to flip to the next card of the given container.
    public void previous(Container parent): is used to flip to the previous card of the given container.
    public void first(Container parent): is used to flip to the first card of the given container.
    public void last(Container parent): is used to flip to the last card of the given container.
    public void show(Container parent, String name): is used to flip to the specified card with the given name.



->Box Layout
The Java BoxLayout class is used to arrange the components either vertically or horizontally.

- Fields of BoxLayout Class
public static final int X_AXIS: Alignment of the components are horizontal from left to right.
public static final int Y_AXIS: Alignment of the components are vertical from top to bottom.
public static final int LINE_AXIS: Alignment of the components is similar to the way words are aligned in a line, which is based on the ComponentOrientation property of the container.
public static final int PAGE_AXIS: Alignment of the components is similar to the way text lines are put on a page.

Constructor of BoxLayout class
    ```BoxLayout(Container c, int axis): creates a box layout that arranges the components with the given axis.

```setLayout (new BoxLayout(this, BoxLayout.X_AXIS)); 

```setLayout (new BoxLayout (this, BoxLayout.Y_AXIS));

```setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT); 
```setLayout (new BoxLayout(this, BoxLayout.LINE_AXIS)); 



